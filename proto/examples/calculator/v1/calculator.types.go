// Code generated by protoc-gen-protomcp. DO NOT EDIT.
// source: calculator/v1/calculator.proto

package v1

import (
	"context"
	"errors"
)

// Enum type
type StatusEnum int32

const (
	StatusEnum_STATUS_UNSPECIFIED StatusEnum = 0
	StatusEnum_STATUS_ACTIVE      StatusEnum = 1
	StatusEnum_STATUS_INACTIVE    StatusEnum = 2
	StatusEnum_STATUS_SUSPENDED   StatusEnum = 3
)

var statusEnum_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ACTIVE",
	2: "STATUS_INACTIVE",
	3: "STATUS_SUSPENDED",
}

var statusEnum_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ACTIVE":      1,
	"STATUS_INACTIVE":    2,
	"STATUS_SUSPENDED":   3,
}

// String returns the string representation of the StatusEnum
func (x StatusEnum) String() string {
	if s, ok := statusEnum_name[int32(x)]; ok {
		return s
	}
	return ""
}

// IsValid returns true if the StatusEnum is a known value
func (x StatusEnum) IsValid() bool {
	_, ok := statusEnum_name[int32(x)]
	return ok
}

// MarshalText implements encoding.TextMarshaler
func (x StatusEnum) MarshalText() ([]byte, error) {
	s := x.String()
	if s == "" {
		return nil, errors.New("invalid enum value")
	}
	return []byte(s), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (x *StatusEnum) UnmarshalText(text []byte) error {
	if v, ok := statusEnum_value[string(text)]; ok {
		*x = StatusEnum(v)
		return nil
	}
	return errors.New("invalid enum value")
}

// IAddRequest is the interface for AddRequest
// AddRequest is the request message for Add method
type IAddRequest interface {

	// GetA returns the a field
	GetA() float64
	// SetA sets the a field
	SetA(v float64) error

	// GetB returns the b field
	GetB() float64
	// SetB sets the b field
	SetB(v float64) error
}

// IAddResponse is the interface for AddResponse
// AddResponse is the response message for Add method
type IAddResponse interface {

	// GetResult returns the result field
	GetResult() float64
	// SetResult sets the result field
	SetResult(v float64) error
}

// IMultiplyRequest is the interface for MultiplyRequest
// MultiplyRequest is the request message for Multiply method
type IMultiplyRequest interface {

	// GetA returns the a field
	GetA() float64
	// SetA sets the a field
	SetA(v float64) error

	// GetB returns the b field
	GetB() float64
	// SetB sets the b field
	SetB(v float64) error
}

// IMultiplyResponse is the interface for MultiplyResponse
// MultiplyResponse is the response message for Multiply method
type IMultiplyResponse interface {

	// GetResult returns the result field
	GetResult() float64
	// SetResult sets the result field
	SetResult(v float64) error
}

// IDivideRequest is the interface for DivideRequest
// DivideRequest is the request message for Divide method
type IDivideRequest interface {

	// GetA returns the a field
	GetA() float64
	// SetA sets the a field
	SetA(v float64) error

	// GetB returns the b field
	GetB() float64
	// SetB sets the b field
	SetB(v float64) error
}

// IDivideResponse is the interface for DivideResponse
// DivideResponse is the response message for Divide method
type IDivideResponse interface {

	// GetQuotient returns the quotient field
	GetQuotient() float64
	// SetQuotient sets the quotient field
	SetQuotient(v float64) error

	// GetRemainder returns the remainder field
	GetRemainder() float64
	// SetRemainder sets the remainder field
	SetRemainder(v float64) error

	// GetError returns the error field
	GetError() string
	// SetError sets the error field
	SetError(v string) error
	// HasError returns true if the error field is set
	HasError() bool
	// ClearError clears the error field
	ClearError()
}

// IComplexMessage is the interface for ComplexMessage
// Complex example with various field types
type IComplexMessage interface {

	// GetId returns the id field
	GetId() string
	// SetId sets the id field
	SetId(v string) error

	// GetCount returns the count field
	GetCount() int32
	// SetCount sets the count field
	SetCount(v int32) error

	// GetActive returns the active field
	GetActive() bool
	// SetActive sets the active field
	SetActive(v bool) error

	// GetDescription returns the description field
	GetDescription() string
	// SetDescription sets the description field
	SetDescription(v string) error
	// HasDescription returns true if the description field is set
	HasDescription() bool
	// ClearDescription clears the description field
	ClearDescription()

	// GetTags returns the tags field
	GetTags() []string
	// SetTags sets the tags field
	SetTags(v []string) error

	// GetMetadata returns the metadata field
	GetMetadata() map[string]string
	// SetMetadata sets the metadata field
	SetMetadata(v map[string]string) error

	// GetUser returns the user field
	GetUser() IUserInfo
	// SetUser sets the user field
	SetUser(v IUserInfo) error

	// GetStatus returns the status field
	GetStatus() Status
	// SetStatus sets the status field
	SetStatus(v Status) error

	// GetIdentifier returns the identifier `oneof` value
	GetIdentifier() isComplexMessage_Identifier
	// SetEmail sets the email field in the identifier `oneof`
	SetEmail(v string) error
	// SetUsername sets the username field in the identifier `oneof`
	SetUsername(v string) error
	// SetUserId sets the user_id field in the identifier `oneof`
	SetUserId(v int64) error
}

// IUserInfo is the interface for UserInfo
// Nested message type
type IUserInfo interface {

	// GetName returns the name field
	GetName() string
	// SetName sets the name field
	SetName(v string) error

	// GetAge returns the age field
	GetAge() int32
	// SetAge sets the age field
	SetAge(v int32) error
}

// ICalculatorService is the interface for CalculatorService
// Calculator service provides basic arithmetic operations
type ICalculatorService interface {

	// Add two numbers
	Add(ctx context.Context, req IAddRequest) (IAddResponse, error)

	// Multiply two numbers
	Multiply(ctx context.Context, req IMultiplyRequest) (IMultiplyResponse, error)

	// Divide two numbers
	Divide(ctx context.Context, req IDivideRequest) (IDivideResponse, error)
}
